name: Publish State Manager image to GHCR and Deploy to K8s

on:
  push:
    branches: [main]
    paths:
      - 'state-manager/**'
  release:
    types: [published]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/exosphere-state-manager
  SHA_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: test_db

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          cache: true

      - name: Install dev dependencies with uv
        working-directory: state-manager
        run: |
          uv sync --group dev

      - name: Run full test suite with coverage
        working-directory: state-manager
        env:
          MONGO_URI: mongodb://admin:password@localhost:27017
          MONGO_DATABASE_NAME: test_exosphere_state_manager
          STATE_MANAGER_SECRET: test-secret-key
          SECRETS_ENCRYPTION_KEY: YTzpUlBGLSwm-3yKJRJTZnb0_aQuQQHyz64s8qAERVU=
        run: |
          uv run pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing --cov-report=html -v --junitxml=full-pytest-report.xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: exospherehost/exospherehost
          files: state-manager/coverage.xml
          flags: unit-tests
          name: state-manager-coverage-report
          fail_ci_if_error: true

  publish-image:
    runs-on: ubuntu-latest
    needs: test
    if: github.repository == 'exospherehost/exospherehost'

    permissions:
      contents: read
      packages: write
    
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      json: ${{ steps.meta.outputs.json }}

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate tags & labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw, value=beta-latest
            type=sha, value=${{ env.SHA_TAG }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./state-manager
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
